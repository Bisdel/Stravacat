{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticationService {\n  get token() {\n    return this._token;\n  }\n  set token(value) {\n    // Stockage du jeton dans le navigateur pour le retrouver au refresh de l'appli (et éviter des déconnexions à répétition)\n    localStorage.setItem('token', value);\n    this._token = value;\n  }\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this._token = \"\";\n    // Récupération du jeton stocké dans le navigateur\n    this.token = localStorage.getItem('token') ?? \"\";\n  }\n  isLogged() {\n    return !!(this.token && this.token != \"\");\n  }\n  login(username, password, options) {\n    this.httpClient.post(`${environment.apiUrl}/utilisateur/connexion`, {\n      username,\n      password\n    }).subscribe({\n      next: result => {\n        this.token = result.token;\n        if (options.next) {\n          options.next(result);\n        }\n      },\n      error: () => {\n        if (options.error) {\n          options.error();\n        }\n      }\n    });\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticationService };","map":{"version":3,"names":["environment","AuthenticationService","token","_token","value","localStorage","setItem","constructor","httpClient","getItem","isLogged","login","username","password","options","post","apiUrl","subscribe","next","result","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\brico\\Documents\\Sopra\\Java-Projects\\Stravacat Angular\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthResponse } from '../models/auth-response';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private _token: string = \"\";\r\n\r\n  public get token(): string {\r\n    return this._token;\r\n  }\r\n  \r\n  public set token(value: string) {\r\n    // Stockage du jeton dans le navigateur pour le retrouver au refresh de l'appli (et éviter des déconnexions à répétition)\r\n    localStorage.setItem('token', value);\r\n\r\n    this._token = value;\r\n  }\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    // Récupération du jeton stocké dans le navigateur\r\n    this.token = localStorage.getItem('token') ?? \"\";\r\n  }\r\n\r\n  public isLogged() {\r\n    return !!(this.token && this.token != \"\");\r\n  }\r\n\r\n  public login(username: string, password: string, options: any) {\r\n    this.httpClient.post<AuthResponse>(`${ environment.apiUrl }/utilisateur/connexion`, {\r\n      username,\r\n      password\r\n    }).subscribe({\r\n      next: result => {\r\n        this.token = result.token;\r\n\r\n        if (options.next) {\r\n          options.next(result);\r\n        }\r\n      },\r\n\r\n      error: () => {\r\n        if (options.error) {\r\n          options.error();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;;;AAEzD,MAGaC,qBAAqB;EAGhC,IAAWC,KAAKA,CAAA;IACd,OAAO,IAAI,CAACC,MAAM;EACpB;EAEA,IAAWD,KAAKA,CAACE,KAAa;IAC5B;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IAEpC,IAAI,CAACD,MAAM,GAAGC,KAAK;EACrB;EAEAG,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAbtB,KAAAL,MAAM,GAAW,EAAE;IAczB;IACA,IAAI,CAACD,KAAK,GAAGG,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAClD;EAEOC,QAAQA,CAAA;IACb,OAAO,CAAC,EAAE,IAAI,CAACR,KAAK,IAAI,IAAI,CAACA,KAAK,IAAI,EAAE,CAAC;EAC3C;EAEOS,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,OAAY;IAC3D,IAAI,CAACN,UAAU,CAACO,IAAI,CAAe,GAAIf,WAAW,CAACgB,MAAO,wBAAwB,EAAE;MAClFJ,QAAQ;MACRC;KACD,CAAC,CAACI,SAAS,CAAC;MACXC,IAAI,EAAEC,MAAM,IAAG;QACb,IAAI,CAACjB,KAAK,GAAGiB,MAAM,CAACjB,KAAK;QAEzB,IAAIY,OAAO,CAACI,IAAI,EAAE;UAChBJ,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;;MAExB,CAAC;MAEDC,KAAK,EAAEA,CAAA,KAAK;QACV,IAAIN,OAAO,CAACM,KAAK,EAAE;UACjBN,OAAO,CAACM,KAAK,EAAE;;MAEnB;KACD,CAAC;EACJ;;AA1CWnB,qBAAqB,C;mBAArBA,qBAAqB,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAArBvB,qBAAqB,C;SAArBA,qBAAqB;EAAAwB,OAAA,EAArBxB,qBAAqB,CAAAyB,IAAA;EAAAC,UAAA,EAFpB;AAAM;SAEP1B,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}