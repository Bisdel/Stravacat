{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthenticationInterceptor {\n  constructor(srvAuth, router) {\n    this.srvAuth = srvAuth;\n    this.router = router;\n  }\n  intercept(request, next) {\n    if (this.srvAuth.isLogged()) {\n      request = request.clone({\n        setHeaders: {\n          'Authorization': `Bearer ${this.srvAuth.token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status == 403) {\n        this.srvAuth.token = \"\";\n        this.router.navigate(['/connexion']);\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nAuthenticationInterceptor.ɵfac = function AuthenticationInterceptor_Factory(t) {\n  return new (t || AuthenticationInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router));\n};\nAuthenticationInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationInterceptor,\n  factory: AuthenticationInterceptor.ɵfac\n});\nexport { AuthenticationInterceptor };","map":{"version":3,"names":["catchError","throwError","AuthenticationInterceptor","constructor","srvAuth","router","intercept","request","next","isLogged","clone","setHeaders","token","handle","pipe","error","status","navigate","i0","ɵɵinject","i1","AuthenticationService","i2","Router","factory","ɵfac"],"sources":["C:\\Users\\brico\\Documents\\Sopra\\Java-Projects\\Stravacat Angular\\src\\app\\interceptors\\authentication.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthenticationInterceptor implements HttpInterceptor {\r\n  constructor(private srvAuth: AuthenticationService, private router: Router) { }\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    if (this.srvAuth.isLogged()) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          'Authorization': `Bearer ${ this.srvAuth.token }`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(request)\r\n      .pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status == 403) {\r\n            this.srvAuth.token = \"\";\r\n            this.router.navigate([ '/connexion' ]);\r\n          }\r\n          \r\n          return throwError(() => error);\r\n        })\r\n      );\r\n  }\r\n}\r\n"],"mappings":"AAQA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAIzD,MACaC,yBAAyB;EACpCC,YAAoBC,OAA8B,EAAUC,MAAc;IAAtD,KAAAD,OAAO,GAAPA,OAAO;IAAiC,KAAAC,MAAM,GAANA,MAAM;EAAY;EAE9EC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI,IAAI,CAACJ,OAAO,CAACK,QAAQ,EAAE,EAAE;MAC3BF,OAAO,GAAGA,OAAO,CAACG,KAAK,CAAC;QACtBC,UAAU,EAAE;UACV,eAAe,EAAE,UAAW,IAAI,CAACP,OAAO,CAACQ,KAAM;;OAElD,CAAC;;IAGJ,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC,CACxBO,IAAI,CACHd,UAAU,CAAEe,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,IAAI,GAAG,EAAE;QACvB,IAAI,CAACZ,OAAO,CAACQ,KAAK,GAAG,EAAE;QACvB,IAAI,CAACP,MAAM,CAACY,QAAQ,CAAC,CAAE,YAAY,CAAE,CAAC;;MAGxC,OAAOhB,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACL;;AAvBWb,yBAAyB,C;mBAAzBA,yBAAyB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAzBrB,yBAAyB,C;SAAzBA,yBAAyB;EAAAsB,OAAA,EAAzBtB,yBAAyB,CAAAuB;AAAA;SAAzBvB,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}